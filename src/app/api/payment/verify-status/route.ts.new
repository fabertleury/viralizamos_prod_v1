import { NextRequest, NextResponse } from 'next/server';
import mercadopago from 'mercadopago';
import { createClient } from '@/lib/supabase/server';
import { createOrUpdateCustomer } from '@/services/customerService';
import { SocialMediaService } from '@/lib/services/socialMediaService';

// Configuração do Mercado Pago
mercadopago.configurations.setAccessToken(process.env.MERCADO_PAGO_ACCESS_TOKEN || '');

// Cache temporário para reduzir consultas ao Mercado Pago
// Formato: { paymentId: { status, timestamp } }
const statusCache: Record<string, { status: string, timestamp: number }> = {};

// Tempo de validade do cache em milissegundos (5 segundos)
const CACHE_TTL = 5000;

export async function POST(request: NextRequest) {
  try {
    const { payment_id } = await request.json();
    console.log('VERIFICANDO STATUS DE PAGAMENTO:', { payment_id });

    if (!payment_id) {
      console.error('Erro: Payment ID não fornecido');
      return NextResponse.json({
        error: 'Payment ID is required',
        status: 'error'
      }, { status: 400 });
    }

    // Verificar se temos um cache válido para este pagamento
    const now = Date.now();
    const cachedData = statusCache[payment_id];
    
    if (cachedData && (now - cachedData.timestamp < CACHE_TTL)) {
      console.log(`Usando cache para payment_id ${payment_id}, status: ${cachedData.status}`);
      return NextResponse.json({
        status: cachedData.status,
        source: 'cache'
      });
    }

    const supabase = createClient();

    // Buscar transação no Supabase
    const { data: transaction, error: transactionError } = await supabase
      .from('transactions')
      .select('*')
      .eq('payment_external_reference', payment_id)
      .single();

    if (transactionError) {
      console.log('Transação não encontrada no Supabase, buscando no Mercado Pago');

      // Tentar buscar diretamente no Mercado Pago
      try {
        const paymentResponse = await mercadopago.payment.findById(payment_id);
        const paymentData = paymentResponse.body;

        console.log(`Status do pagamento (Mercado Pago direto): ${paymentData.status}`);

        // Armazenar no cache
        statusCache[payment_id] = {
          status: paymentData.status,
          timestamp: now
        };

        return NextResponse.json({
          status: paymentData.status,
          statusDetail: paymentData.status_detail,
          payment: paymentData,
          source: 'mercadopago_direct'
        });
      } catch (mpError) {
        console.error('Erro ao buscar pagamento no Mercado Pago:', mpError);
        return NextResponse.json({
          error: 'Payment not found',
          status: 'not_found'
        }, { status: 404 });
      }
    }

    // Se encontrou a transação no Supabase
    console.log('Transação encontrada no Supabase:', {
      id: transaction.id,
      status: transaction.status,
      payment_id: transaction.payment_external_reference
    });

    // Verificar status atual no Mercado Pago
    try {
      const paymentResponse = await mercadopago.payment.findById(payment_id);
      const paymentData = paymentResponse.body;
      const currentStatus = paymentData.status;

      console.log(`Status atual do pagamento (Mercado Pago): ${currentStatus}`);

      // Armazenar no cache
      statusCache[payment_id] = {
        status: currentStatus,
        timestamp: now
      };

      // Se o status mudou, atualizar no Supabase
      if (transaction.status !== currentStatus) {
        console.log('Status mudou:', {
          old: transaction.status,
          new: currentStatus
        });

        const { error: updateError } = await supabase
          .from('transactions')
          .update({
            status: currentStatus,
            metadata: {
              ...transaction.metadata,
              payment_details: paymentData
            }
          })
          .eq('id', transaction.id);

        if (updateError) {
          console.error('Erro ao atualizar status da transação:', updateError);
        } else {
          console.log('Status da transação atualizado com sucesso no Supabase');

          // Se o pagamento foi aprovado, enviar pedido para o provedor
          if (currentStatus === 'approved' && transaction.status !== 'approved') {
            try {
              console.log('Pagamento aprovado! Enviando pedido para o provedor...');

              // Extrair dados do serviço da transação
              const serviceMetadata = transaction.metadata?.service;
              const posts = transaction.metadata?.posts;
              const profile = transaction.metadata?.profile;
              const customer = transaction.metadata?.customer;
              const email = transaction.customer_email || 
                           transaction.metadata?.customer?.email || 
                           transaction.metadata?.email || 
                           transaction.metadata?.contact?.email || 
                           transaction.metadata?.profile?.email;
              const customerName = transaction.customer_name || 
                                  transaction.metadata?.customer?.name || 
                                  transaction.metadata?.name || 
                                  transaction.metadata?.contact?.name || 
                                  transaction.metadata?.profile?.full_name;
              const phone = transaction.metadata?.customer?.phone || 
                           transaction.metadata?.phone || 
                           transaction.metadata?.contact?.phone;
                                  
              // Se não tiver cliente, criar um novo
              if (!customer) {
                console.log('Cliente não encontrado, criando um novo...');
                
                if (!email) {
                  console.error('Email não encontrado nos metadados da transação');
                  throw new Error('Email não encontrado para criar cliente');
                }
                
                const { data: newCustomer, error: customerError } = await createOrUpdateCustomer({
                  email,
                  name: customerName || email.split('@')[0],
                  phone
                });
                
                if (customerError) {
                  console.error('Erro ao criar cliente:', customerError);
                  throw new Error(`Erro ao criar cliente: ${customerError.message}`);
                }
                
                console.log('Novo cliente criado:', newCustomer);
              }
              
              // Buscar o serviço diretamente do banco de dados usando o service_id da transação
              // Isso garante que usamos sempre o provider_id correto e atualizado
              console.log(`Buscando serviço com ID: ${transaction.service_id}`);
              const { data: serviceData, error: serviceError } = await supabase
                .from('services')
                .select('*')
                .eq('id', transaction.service_id)
                .single();
                
              if (serviceError) {
                console.error('Erro ao buscar serviço:', serviceError);
                throw new Error(`Erro ao buscar serviço: ${serviceError.message}`);
              }
              
              if (!serviceData) {
                console.error(`Serviço com ID ${transaction.service_id} não encontrado`);
                throw new Error(`Serviço não encontrado. Verifique o ID do serviço na transação.`);
              }
              
              // Combinar os dados do serviço do banco com os metadados da transação
              const service = {
                ...serviceData,
                ...serviceMetadata // Sobrescrever com os dados da transação, se existirem
              };
              
              console.log('Serviço completo:', service);
              console.log('Dados do perfil:', profile);
              console.log('Posts recebidos:', posts);
              
              // Verificar se o serviço tem todas as propriedades necessárias
              if (!service || !service.id || !service.provider_id) {
                console.error('Serviço inválido:', service);
                throw new Error('Serviço inválido ou incompleto');
              }
              
              // Buscar o provedor associado ao serviço
              let provider = null;
                  
              if (service.provider_id) {
                console.log(`Buscando provedor com ID: ${service.provider_id}`);
                
                // Verificar se o provider_id é um UUID válido
                const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(service.provider_id);
                
                if (!isUUID) {
                  console.error(`Provider_id "${service.provider_id}" não é um UUID válido.`);
                  throw new Error(`Provider ID inválido: ${service.provider_id}. Verifique o cadastro do serviço.`);
                }
                
                // Se for um UUID válido, buscar diretamente pelo ID
                const { data: providerData, error: providerError } = await supabase
                  .from('providers')
                  .select('*')
                  .eq('id', service.provider_id)
                  .single();
                
                if (providerError) {
                  console.error('Erro ao buscar provedor:', providerError);
                  throw new Error(`Erro ao buscar provedor: ${providerError.message}`);
                }
                
                if (!providerData) {
                  console.error(`Provedor com ID ${service.provider_id} não encontrado`);
                  throw new Error(`Provedor não encontrado para o serviço. Verifique o cadastro do serviço.`);
                }
                
                provider = providerData;
                console.log('Provedor encontrado:', {
                  id: provider.id,
                  name: provider.name
                });
              } else {
                console.error('Serviço não tem provider_id:', service);
                throw new Error('Serviço não tem provider_id configurado');
              }
              
              // Array para armazenar os resultados dos pedidos
              const orderResults = [];
              
              // Se não há posts, criar um post padrão com o link do perfil
              if (!posts || posts.length === 0) {
                console.log('Nenhum post encontrado, criando post padrão com o link do perfil');
                
                if (!profile || !profile.link) {
                  console.error('Perfil ou link do perfil não encontrado');
                  throw new Error('Não foi possível criar post padrão: perfil não encontrado');
                }
                
                // Criar post padrão com o link do perfil
                const defaultPost = {
                  link: profile.link,
                  caption: profile.username || profile.full_name || 'Perfil',
                  username: profile.username || profile.full_name || 'N/A'
                };
                
                console.log('Post padrão criado:', defaultPost);
                
                // Processar o post padrão
                try {
                  // Extrair o código do post do Instagram
                  function extractPostCode(link) {
                    if (!link) return null;
                    
                    // Tenta extrair o código do post do formato completo da URL
                    const postMatch = link.match(/instagram\.com\/p\/([^\/\?]+)/i);
                    if (postMatch && postMatch[1]) {
                      return postMatch[1];
                    }
                    
                    // Tenta extrair o código do post do formato de URL curta
                    const shortMatch = link.match(/instagr\.am\/p\/([^\/\?]+)/i);
                    if (shortMatch && shortMatch[1]) {
                      return shortMatch[1];
                    }
                    
                    // Se a URL não parece ser de um post, pode ser um perfil
                    const profileMatch = link.match(/instagram\.com\/([^\/\?]+)/i);
                    if (profileMatch && profileMatch[1]) {
                      // É um perfil, não um post
                      return null;
                    }
                    
                    // Verifica se o próprio link já é um código de post
                    if (/^[A-Za-z0-9_-]{11}$/.test(link)) {
                      return link;
                    }
                    
                    return null;
                  }
                  
                  // Função para formatar o link do Instagram
                  function formatInstagramLink(link) {
                    if (!link) return null;
                    
                    console.log('Link original recebido:', link);
                    
                    // Verifica se já é um link completo de um post do Instagram
                    if (link.includes('instagram.com/p/')) {
                      const postCode = extractPostCode(link);
                      if (postCode) {
                        console.log('Código do post extraído:', postCode);
                        const formattedLink = `https://instagram.com/p/${postCode}`;
                        console.log('Link formatado para post:', formattedLink);
                        return formattedLink;
                      }
                    }
                    
                    // Verifica se é um nome de usuário ou link de perfil
                    const usernameMatch = link.match(/instagram\.com\/([^\/\?]+)/i);
                    let username = null;
                    
                    if (usernameMatch && usernameMatch[1]) {
                      username = usernameMatch[1];
                    } else if (!link.includes('instagram.com')) {
                      // Se não tem instagram.com, pode ser apenas o nome de usuário
                      username = link.startsWith('@') ? link.substring(1) : link;
                    }
                    
                    if (username) {
                      console.log('Username do Instagram detectado:', username);
                      const formattedLink = `https://instagram.com/${username}`;
                      console.log('Link formatado para perfil:', formattedLink);
                      return formattedLink;
                    }
                    
                    // Se chegou aqui, não conseguiu formatar o link
                    console.error('Não foi possível formatar o link do Instagram:', link);
                    return null;
                  }
                  
                  // Formatar o link do Instagram
                  const formattedLink = formatInstagramLink(defaultPost.link);
                  if (!formattedLink) {
                    throw new Error(`Link do Instagram inválido: ${defaultPost.link}`);
                  }
                  
                  // Verificar e garantir que temos todos os dados necessários
                  if (!service.external_id) {
                    console.error('Serviço não tem external_id:', service);
                    throw new Error('Serviço não tem external_id configurado');
                  }
                  
                  // Garantir que quantity seja um número ou string
                  const quantity = service.quantity || 0;
                  
                  // Verificar se temos a API key do provedor
                  if (!provider.api_key) {
                    console.error('Provedor não tem API key:', provider);
                    throw new Error('Provedor não tem API key configurada');
                  }
                  
                  // Verificar se temos a URL da API do provedor
                  if (!provider.api_url) {
                    console.error('Provedor não tem URL da API:', provider);
                    throw new Error('Provedor não tem URL da API configurada');
                  }
                  
                  // Preparar os dados para enviar diretamente para o provedor
                  const providerRequestData = {
                    key: provider.api_key,
                    action: "add",
                    service: service.external_id.toString(),
                    link: formattedLink,
                    quantity: quantity.toString()
                  };
                  
                  console.log('Dados para o provedor:', providerRequestData);
                  console.log('Enviando requisição diretamente para:', provider.api_url);
                  console.log('Corpo da requisição (JSON):', JSON.stringify(providerRequestData));
                  
                  try {
                    // Enviar requisição diretamente para o provedor
                    console.log('Iniciando requisição POST para o provedor...');
                    const orderRequest = await fetch(provider.api_url, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                      },
                      body: JSON.stringify(providerRequestData),
                    });
                    
                    console.log('Status da resposta:', orderRequest.status);
                    console.log('Headers da resposta:', Object.fromEntries(orderRequest.headers.entries()));
                    
                    if (!orderRequest.ok) {
                      const errorText = await orderRequest.text();
                      console.error(`Erro na resposta do provedor (${orderRequest.status}): ${errorText}`);
                      
                      let errorData;
                      try {
                        // Tentar analisar o erro como JSON
                        errorData = JSON.parse(errorText);
                        console.error('Detalhes do erro:', errorData);
                      } catch (parseError) {
                        // Se não for JSON, usar o texto bruto
                        errorData = { error: errorText };
                      }
                      
                      throw new Error(`Erro ao enviar pedido para o provedor: ${JSON.stringify(errorData)}`);
                    }
                    
                    const responseData = await orderRequest.json();
                    console.log('Resposta do provedor:', responseData);
                    
                    // Verificar a resposta do provedor
                    if (responseData.error) {
                      // Mapear erros conhecidos para mensagens amigáveis
                      const errorMessages = {
                        'neworder.error.not_enough_funds': 'Saldo insuficiente na conta do provedor. Por favor, entre em contato com o suporte.',
                        'neworder.error.invalid_link': 'Link do Instagram inválido. Verifique se o link está correto.',
                        'neworder.error.invalid_quantity': 'Quantidade inválida. Verifique se a quantidade está dentro dos limites permitidos.',
                        'neworder.error.invalid_service': 'Serviço inválido. Verifique se o serviço está ativo.'
                      };
                      
                      const errorMessage = errorMessages[responseData.error] || `Erro do provedor: ${responseData.error}`;
                      console.error(`Erro na resposta do provedor: ${errorMessage}`);
                      
                      // Adicionar ao resultado dos pedidos
                      orderResults.push({
                        success: false,
                        error: errorMessage,
                        post: defaultPost,
                        providerResponse: responseData
                      });
                      
                      // Cadastrar o pedido na tabela orders mesmo com erro
                      try {
                        const { data: orderData, error: orderError } = await supabase
                          .from('orders')
                          .insert({
                            transaction_id: transaction.id,
                            service_id: service.id,
                            customer_id: customer.id,
                            link: formattedLink,
                            quantity: quantity,
                            status: 'error',
                            status_description: errorMessage,
                            provider_id: provider.id,
                            provider_order_id: responseData.order || null,
                            needs_review: true,
                            metadata: {
                              post: defaultPost,
                              providerResponse: responseData,
                              providerRequestData
                            }
                          })
                          .select()
                          .single();
                        
                        if (orderError) {
                          console.error('Erro ao cadastrar pedido com erro:', orderError);
                        } else {
                          console.log('Pedido com erro cadastrado com sucesso:', orderData);
                        }
                      } catch (orderDbError) {
                        console.error('Erro ao inserir pedido com erro no banco:', orderDbError);
                      }
                    } else {
                      // Se não houver erro, considerar como sucesso
                      console.log('Pedido enviado com sucesso para o provedor:', responseData);
                      
                      // Adicionar ao resultado dos pedidos
                      orderResults.push({
                        success: true,
                        order: responseData,
                        post: defaultPost
                      });
                      
                      // Cadastrar o pedido bem-sucedido na tabela orders
                      try {
                        const { data: orderData, error: orderError } = await supabase
                          .from('orders')
                          .insert({
                            transaction_id: transaction.id,
                            service_id: service.id,
                            customer_id: customer.id,
                            link: formattedLink,
                            quantity: quantity,
                            status: 'pending',
                            provider_id: provider.id,
                            provider_order_id: responseData.order || null,
                            metadata: {
                              post: defaultPost,
                              providerResponse: responseData,
                              providerRequestData
                            }
                          })
                          .select()
                          .single();
                        
                        if (orderError) {
                          console.error('Erro ao cadastrar pedido:', orderError);
                        } else {
                          console.log('Pedido cadastrado com sucesso:', orderData);
                        }
                      } catch (orderDbError) {
                        console.error('Erro ao inserir pedido no banco:', orderDbError);
                      }
                    }
                  } catch (orderError) {
                    console.error('Erro ao processar pedido para o post padrão:', defaultPost.link, orderError);
                    orderResults.push({ success: false, error: String(orderError), post: defaultPost });
                    
                    // Cadastrar o pedido com erro na tabela orders
                    try {
                      const errorMessage = String(orderError);
                      const { data: orderData, error: orderError2 } = await supabase
                        .from('orders')
                        .insert({
                          transaction_id: transaction.id,
                          service_id: service.id,
                          customer_id: customer.id,
                          link: formattedLink,
                          quantity: quantity,
                          status: 'error',
                          status_description: errorMessage,
                          provider_id: provider.id,
                          needs_review: true,
                          metadata: {
                            post: defaultPost,
                            error: errorMessage,
                            providerRequestData
                          }
                        })
                        .select()
                        .single();
                      
                      if (orderError2) {
                        console.error('Erro ao cadastrar pedido com erro de requisição:', orderError2);
                      } else {
                        console.log('Pedido com erro de requisição cadastrado com sucesso:', orderData);
                      }
                    } catch (orderDbError) {
                      console.error('Erro ao inserir pedido com erro de requisição no banco:', orderDbError);
                    }
                  }
                } catch (orderError) {
                  console.error('Erro ao processar pedido para o post padrão:', defaultPost.link, orderError);
                  orderResults.push({ success: false, error: String(orderError), post: defaultPost });
                  
                  // Cadastrar o pedido com erro na tabela orders
                  try {
                    const errorMessage = String(orderError);
                    const { data: orderData, error: orderError2 } = await supabase
                      .from('orders')
                      .insert({
                        transaction_id: transaction.id,
                        service_id: service.id,
                        customer_id: customer.id,
                        link: defaultPost.link,
                        quantity: quantity,
                        status: 'error',
                        status_description: errorMessage,
                        provider_id: provider.id,
                        needs_review: true,
                        metadata: {
                          post: defaultPost,
                          error: errorMessage
                        }
                      })
                      .select()
                      .single();
                    
                    if (orderError2) {
                      console.error('Erro ao cadastrar pedido com erro de processamento:', orderError2);
                    } else {
                      console.log('Pedido com erro de processamento cadastrado com sucesso:', orderData);
                    }
                  } catch (orderDbError) {
                    console.error('Erro ao inserir pedido com erro de processamento no banco:', orderDbError);
                  }
                }
              } else {
                // Processar cada post recebido
                for (const post of posts) {
                  try {
                    console.log('Processando post:', post);
                    
                    // Verificar se o post tem um link válido (pode estar em post.link ou post.url)
                    let postLink = post.link || post.url;
                    
                    // Se tiver o código do post, mas não tiver o link completo
                    if (post.code && (!postLink || !postLink.includes('instagram.com'))) {
                      console.log('Post tem código mas não tem link completo, construindo link:', post.code);
                      postLink = `https://instagram.com/p/${post.code}`;
                      console.log('Link construído a partir do código:', postLink);
                    }
                    
                    if (!postLink) {
                      console.log('Post sem link, tentando usar o link do perfil:', profile.link);
                      
                      // Se não tiver link no post, usar o link do perfil
                      if (profile && profile.link) {
                        postLink = profile.link;
                        console.log('Usando link do perfil como fallback:', postLink);
                      } else {
                        console.error('Não foi possível determinar um link válido para o post');
                        orderResults.push({ success: false, error: 'Link do Instagram não encontrado', post });
                        continue; // Pular este post
                      }
                    }
                    
                    // Extrair o código do post do Instagram
                    function extractPostCode(link) {
                      if (!link) return null;
                      
                      // Tenta extrair o código do post do formato completo da URL
                      const postMatch = link.match(/instagram\.com\/p\/([^\/\?]+)/i);
                      if (postMatch && postMatch[1]) {
                        return postMatch[1];
                      }
                      
                      // Tenta extrair o código do post do formato de URL curta
                      const shortMatch = link.match(/instagr\.am\/p\/([^\/\?]+)/i);
                      if (shortMatch && shortMatch[1]) {
                        return shortMatch[1];
                      }
                      
                      // Se a URL não parece ser de um post, pode ser um perfil
                      const profileMatch = link.match(/instagram\.com\/([^\/\?]+)/i);
                      if (profileMatch && profileMatch[1]) {
                        // É um perfil, não um post
                        return null;
                      }
                      
                      // Verifica se o próprio link já é um código de post
                      if (/^[A-Za-z0-9_-]{11}$/.test(link)) {
                        return link;
                      }
                      
                      return null;
                    }
                    
                    // Função para formatar o link do Instagram
                    function formatInstagramLink(link) {
                      if (!link) return null;
                      
                      console.log('Link original recebido:', link);
                      
                      // Verifica se já é um link completo de um post do Instagram
                      if (link.includes('instagram.com/p/')) {
                        const postCode = extractPostCode(link);
                        if (postCode) {
                          console.log('Código do post extraído:', postCode);
                          const formattedLink = `https://instagram.com/p/${postCode}`;
                          console.log('Link formatado para post:', formattedLink);
                          return formattedLink;
                        }
                      }
                      
                      // Verifica se é um nome de usuário ou link de perfil
                      const usernameMatch = link.match(/instagram\.com\/([^\/\?]+)/i);
                      let username = null;
                      
                      if (usernameMatch && usernameMatch[1]) {
                        username = usernameMatch[1];
                      } else if (!link.includes('instagram.com')) {
                        // Se não tem instagram.com, pode ser apenas o nome de usuário
                        username = link.startsWith('@') ? link.substring(1) : link;
                      }
                      
                      if (username) {
                        console.log('Username do Instagram detectado:', username);
                        const formattedLink = `https://instagram.com/${username}`;
                        console.log('Link formatado para perfil:', formattedLink);
                        return formattedLink;
                      }
                      
                      // Se chegou aqui, não conseguiu formatar o link
                      console.error('Não foi possível formatar o link do Instagram:', link);
                      return null;
                    }
                    
                    // Formatar o link do Instagram
                    const formattedLink = formatInstagramLink(postLink);
                    if (!formattedLink) {
                      throw new Error(`Link do Instagram inválido: ${postLink}`);
                    }
                    
                    // Verificar e garantir que temos todos os dados necessários
                    if (!service.external_id) {
                      console.error('Serviço não tem external_id:', service);
                      throw new Error('Serviço não tem external_id configurado');
                    }
                    
                    // Garantir que quantity seja um número ou string
                    const quantity = service.quantity || 0;
                    
                    // Verificar se temos a API key do provedor
                    if (!provider.api_key) {
                      console.error('Provedor não tem API key:', provider);
                      throw new Error('Provedor não tem API key configurada');
                    }
                    
                    // Verificar se temos a URL da API do provedor
                    if (!provider.api_url) {
                      console.error('Provedor não tem URL da API:', provider);
                      throw new Error('Provedor não tem URL da API configurada');
                    }
                    
                    // Preparar os dados para enviar diretamente para o provedor
                    const providerRequestData = {
                      key: provider.api_key,
                      action: "add",
                      service: service.external_id.toString(),
                      link: formattedLink,
                      quantity: quantity.toString()
                    };
                    
                    console.log('Dados para o provedor:', providerRequestData);
                    console.log('Enviando requisição diretamente para:', provider.api_url);
                    console.log('Corpo da requisição (JSON):', JSON.stringify(providerRequestData));
                    
                    try {
                      // Enviar requisição diretamente para o provedor
                      console.log('Iniciando requisição POST para o provedor...');
                      const orderRequest = await fetch(provider.